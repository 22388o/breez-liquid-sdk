// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'error.dart';
import 'frb_generated.dart';
import 'model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> connect(
        {required String mnemonic,
        String? dataDir,
        required Network network,
        dynamic hint}) =>
    RustLib.instance.api.connect(
        mnemonic: mnemonic, dataDir: dataDir, network: network, hint: hint);

Future<WalletInfo> getInfo({required bool withScan, dynamic hint}) =>
    RustLib.instance.api.getInfo(withScan: withScan, hint: hint);

Future<PrepareSendResponse> prepareSendPayment(
        {required String invoice, dynamic hint}) =>
    RustLib.instance.api.prepareSendPayment(invoice: invoice, hint: hint);

Future<SendPaymentResponse> sendPayment(
        {required PrepareSendResponse req, dynamic hint}) =>
    RustLib.instance.api.sendPayment(req: req, hint: hint);

Future<PrepareReceiveResponse> prepareReceivePayment(
        {required PrepareReceiveRequest req, dynamic hint}) =>
    RustLib.instance.api.prepareReceivePayment(req: req, hint: hint);

Future<ReceivePaymentResponse> receivePayment(
        {required PrepareReceiveResponse req, dynamic hint}) =>
    RustLib.instance.api.receivePayment(req: req, hint: hint);

Future<List<Payment>> listPayments(
        {required bool withScan, required bool includePending, dynamic hint}) =>
    RustLib.instance.api.listPayments(
        withScan: withScan, includePending: includePending, hint: hint);

Future<String> recoverFunds(
        {required LBtcReverseRecovery recovery, dynamic hint}) =>
    RustLib.instance.api.recoverFunds(recovery: recovery, hint: hint);

Future<void> emptyWalletCache({dynamic hint}) =>
    RustLib.instance.api.emptyWalletCache(hint: hint);

Future<void> backup({dynamic hint}) => RustLib.instance.api.backup(hint: hint);

Future<void> restore({String? backupPath, dynamic hint}) =>
    RustLib.instance.api.restore(backupPath: backupPath, hint: hint);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LBtcReverseRecovery>>
@sealed
class LBtcReverseRecovery extends RustOpaque {
  LBtcReverseRecovery.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  LBtcReverseRecovery.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_LBtcReverseRecovery,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_LBtcReverseRecovery,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LBtcReverseRecoveryPtr,
  );
}
