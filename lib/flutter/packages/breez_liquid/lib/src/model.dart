// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

enum Network {
  liquid,
  liquidTestnet,
  ;
}

class Payment {
  final String? id;
  final int? timestamp;
  final int amountSat;
  final int? feesSat;
  final PaymentType paymentType;

  /// Only for [PaymentType::PendingReceive]
  final String? invoice;

  const Payment({
    this.id,
    this.timestamp,
    required this.amountSat,
    this.feesSat,
    required this.paymentType,
    this.invoice,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      timestamp.hashCode ^
      amountSat.hashCode ^
      feesSat.hashCode ^
      paymentType.hashCode ^
      invoice.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Payment &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          timestamp == other.timestamp &&
          amountSat == other.amountSat &&
          feesSat == other.feesSat &&
          paymentType == other.paymentType &&
          invoice == other.invoice;
}

enum PaymentType {
  sent,
  received,
  pendingReceive,
  pendingSend,
  ;
}

class PrepareReceiveRequest {
  final int? payerAmountSat;
  final int? receiverAmountSat;

  const PrepareReceiveRequest({
    this.payerAmountSat,
    this.receiverAmountSat,
  });

  @override
  int get hashCode => payerAmountSat.hashCode ^ receiverAmountSat.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PrepareReceiveRequest &&
          runtimeType == other.runtimeType &&
          payerAmountSat == other.payerAmountSat &&
          receiverAmountSat == other.receiverAmountSat;
}

class PrepareReceiveResponse {
  final String pairHash;
  final int payerAmountSat;
  final int feesSat;

  const PrepareReceiveResponse({
    required this.pairHash,
    required this.payerAmountSat,
    required this.feesSat,
  });

  @override
  int get hashCode =>
      pairHash.hashCode ^ payerAmountSat.hashCode ^ feesSat.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PrepareReceiveResponse &&
          runtimeType == other.runtimeType &&
          pairHash == other.pairHash &&
          payerAmountSat == other.payerAmountSat &&
          feesSat == other.feesSat;
}

class PrepareSendResponse {
  final String id;
  final int payerAmountSat;
  final int receiverAmountSat;
  final int totalFees;
  final String fundingAddress;
  final String invoice;

  const PrepareSendResponse({
    required this.id,
    required this.payerAmountSat,
    required this.receiverAmountSat,
    required this.totalFees,
    required this.fundingAddress,
    required this.invoice,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      payerAmountSat.hashCode ^
      receiverAmountSat.hashCode ^
      totalFees.hashCode ^
      fundingAddress.hashCode ^
      invoice.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PrepareSendResponse &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          payerAmountSat == other.payerAmountSat &&
          receiverAmountSat == other.receiverAmountSat &&
          totalFees == other.totalFees &&
          fundingAddress == other.fundingAddress &&
          invoice == other.invoice;
}

class ReceivePaymentResponse {
  final String id;
  final String invoice;

  const ReceivePaymentResponse({
    required this.id,
    required this.invoice,
  });

  @override
  int get hashCode => id.hashCode ^ invoice.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ReceivePaymentResponse &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          invoice == other.invoice;
}

class SendPaymentResponse {
  final String txid;

  const SendPaymentResponse({
    required this.txid,
  });

  @override
  int get hashCode => txid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SendPaymentResponse &&
          runtimeType == other.runtimeType &&
          txid == other.txid;
}

class WalletInfo {
  final int balanceSat;
  final String pubkey;

  const WalletInfo({
    required this.balanceSat,
    required this.pubkey,
  });

  @override
  int get hashCode => balanceSat.hashCode ^ pubkey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WalletInfo &&
          runtimeType == other.runtimeType &&
          balanceSat == other.balanceSat &&
          pubkey == other.pubkey;
}
